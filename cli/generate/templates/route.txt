import * as validate from "express-validation";

import { Router } from "express";
import { {{ENTITY_CAPITALIZE}}Controller } from "./../../controllers/{{ENTITY_LOWERCASE}}.controller";
import { authorize, ADMIN, LOGGED_USER } from "./../../middlewares/auth.middleware";
import * as Validation from "./../../validations/{{ENTITY_LOWERCASE}}.validation";
import { SecurityMiddleware } from "./../../middlewares/security.middleware";
import { {{ENTITY_CAPITALIZE}}Middleware } from "./../../middlewares/{{ENTITY_LOWERCASE}}.middleware";

const router = Router();

const {{ENTITY_LOWERCASE}}Controller = new {{ENTITY_CAPITALIZE}}Controller();
const {{ENTITY_LOWERCASE}}Middleware = new {{ENTITY_CAPITALIZE}}Middleware();

router
  .route('/')
{{ENTITY_CRUD_READ_START}}
  /**
   * @api {get} v1/{{ENTITY_LOWERCASE}}s List {{ENTITY_CAPITALIZE}}s
   * @apiDescription Get a list of {{ENTITY_LOWERCASE}}s
   * @apiVersion 1.0.0
   * @apiName List{{ENTITY_CAPITALIZE}}s
   * @apiGroup {{ENTITY_CAPITALIZE}}
   * @apiPermission admin
   *
   * @apiHeader {String} Athorization  {{ENTITY_CAPITALIZE}}'s access token
   *
   * @apiParam  {Number{1-}}         [page=1]     List page
   * @apiParam  {Number{1-100}}      [perPage=1]  {{ENTITY_CAPITALIZE}}s per page
   * @apiParam  {String}             [name]       {{ENTITY_CAPITALIZE}}'s name
   * @apiParam  {String}             [email]      {{ENTITY_CAPITALIZE}}'s email
   * @apiParam  {String={{ENTITY_LOWERCASE}},admin}  [role]       {{ENTITY_CAPITALIZE}}'s role
   *
   * @apiSuccess {Object[]} {{ENTITY_LOWERCASE}}s List of {{ENTITY_LOWERCASE}}s.
   *
   * @apiError (Unauthorized 401)  Unauthorized  Only authenticated {{ENTITY_LOWERCASE}}s can access the data
   * @apiError (Forbidden 403)     Forbidden     Only admins can access the data
   */
  .get(authorize([ADMIN]), validate(Validation.list{{ENTITY_CAPITALIZE}}s), {{ENTITY_LOWERCASE}}Controller.list)
{{ENTITY_CRUD_READ_END}}

{{ENTITY_CRUD_CREATE_START}}
  /**
   * @api {post} v1/{{ENTITY_LOWERCASE}}s Create {{ENTITY_CAPITALIZE}}
   * @apiDescription Create a new {{ENTITY_LOWERCASE}}
   * @apiVersion 1.0.0
   * @apiName Create{{ENTITY_CAPITALIZE}}
   * @apiGroup {{ENTITY_CAPITALIZE}}
   * @apiPermission admin
   *
   * @apiHeader {String} Athorization  {{ENTITY_CAPITALIZE}}'s access token
   *
   * @apiParam  {String}             email     {{ENTITY_CAPITALIZE}}'s email
   * @apiParam  {String{8..16}}     password   {{ENTITY_CAPITALIZE}}'s password
   * @apiParam  {String{..32}}      [name]     {{ENTITY_CAPITALIZE}}'s {{ENTITY_LOWERCASE}}name
   * @apiParam  {String={{ENTITY_LOWERCASE}},admin}  [role]    {{ENTITY_CAPITALIZE}}'s role
   *
   * @apiSuccess (Created 201) {String}  {{ENTITY_LOWERCASE}}.id         {{ENTITY_CAPITALIZE}}'s id
   *
   * @apiError (Bad Request 400)   ValidationError  Some parameters may contain invalid values
   * @apiError (Unauthorized 401)  Unauthorized     Only authenticated {{ENTITY_LOWERCASE}}s can create the data
   * @apiError (Forbidden 403)     Forbidden        Only admins can create the data
   */
  .post(authorize([ADMIN]), validate(Validation.create{{ENTITY_CAPITALIZE}}), SecurityMiddleware.sanitize, {{ENTITY_LOWERCASE}}Controller.create);
{{ENTITY_CRUD_CREATE_END}}

router
  .route('/:id')
{{ENTITY_CRUD_READ_ID_START}}
  /**
   * @api {get} v1/{{ENTITY_LOWERCASE}}s/:id Get {{ENTITY_CAPITALIZE}}
   * @apiDescription Get {{ENTITY_LOWERCASE}} information
   * @apiVersion 1.0.0
   * @apiName Get{{ENTITY_CAPITALIZE}}
   * @apiGroup {{ENTITY_CAPITALIZE}}
   * @apiPermission {{ENTITY_LOWERCASE}}
   *
   * @apiHeader {String} Athorization  {{ENTITY_CAPITALIZE}}'s access token
   *
   * @apiSuccess {String}  id         {{ENTITY_CAPITALIZE}}'s id
   *
   * @apiError (Unauthorized 401) Unauthorized Only authenticated {{ENTITY_LOWERCASE}}s can access the data
   * @apiError (Forbidden 403)    Forbidden    Only {{ENTITY_LOWERCASE}} with same id or admins can access the data
   * @apiError (Not Found 404)    NotFound     {{ENTITY_CAPITALIZE}} does not exist
   */
  .get(authorize([ADMIN, LOGGED_USER]), validate(Validation.get{{ENTITY_CAPITALIZE}}), {{ENTITY_LOWERCASE}}Controller.get)
{{ENTITY_CRUD_READ_ID_END}}

{{ENTITY_CRUD_UPDATE_PUT_START}}
  /**
   * @api {put} v1/{{ENTITY_LOWERCASE}}s/:id Replace {{ENTITY_CAPITALIZE}}
   * @apiDescription Replace the whole {{ENTITY_LOWERCASE}} document with a new one
   * @apiVersion 1.0.0
   * @apiName Replace{{ENTITY_CAPITALIZE}}
   * @apiGroup {{ENTITY_CAPITALIZE}}
   * @apiPermission {{ENTITY_LOWERCASE}}
   *
   * @apiHeader {String} Athorization  {{ENTITY_CAPITALIZE}}'s access token
   *
   * @apiParam  {String={{ENTITY_LOWERCASE}},admin}  [role]    {{ENTITY_CAPITALIZE}}'s role
   * (You must be an admin to change the {{ENTITY_LOWERCASE}}'s role)
   *
   * @apiSuccess {String}  id         {{ENTITY_CAPITALIZE}}'s id
   *
   * @apiError (Bad Request 400)  ValidationError  Some parameters may contain invalid values
   * @apiError (Unauthorized 401) Unauthorized Only authenticated {{ENTITY_LOWERCASE}}s can modify the data
   * @apiError (Forbidden 403)    Forbidden    Only {{ENTITY_LOWERCASE}} with same id or admins can modify the data
   * @apiError (Not Found 404)    NotFound     {{ENTITY_CAPITALIZE}} does not exist
   */
  .put(authorize([ADMIN, LOGGED_USER]), validate(Validation.replace{{ENTITY_CAPITALIZE}}), SecurityMiddleware.sanitize, {{ENTITY_LOWERCASE}}Controller.update)
{{ENTITY_CRUD_UPDATE_PUT_END}}

{{ENTITY_CRUD_UPDATE_PATCH_START}}
  /**
   * @api {patch} v1/{{ENTITY_LOWERCASE}}s/:id Update {{ENTITY_CAPITALIZE}}
   * @apiDescription Update some fields of a {{ENTITY_LOWERCASE}} document
   * @apiVersion 1.0.0
   * @apiName Update{{ENTITY_CAPITALIZE}}
   * @apiGroup {{ENTITY_CAPITALIZE}}
   * @apiPermission {{ENTITY_LOWERCASE}}
   *
   * @apiHeader {String} Athorization  {{ENTITY_CAPITALIZE}}'s access token
   *
   * @apiParam  {String}             email     {{ENTITY_CAPITALIZE}}'s email
   * @apiParam  {String{6..128}}     password  {{ENTITY_CAPITALIZE}}'s password
   * @apiParam  {String{..128}}      [name]    {{ENTITY_CAPITALIZE}}'s name
   * @apiParam  {String={{ENTITY_LOWERCASE}},admin}  [role]    {{ENTITY_CAPITALIZE}}'s role
   * (You must be an admin to change the {{ENTITY_LOWERCASE}}'s role)
   *
   * @apiSuccess {String}  id         {{ENTITY_CAPITALIZE}}'s id
   *
   * @apiError (Bad Request 400)  ValidationError  Some parameters may contain invalid values
   * @apiError (Unauthorized 401) Unauthorized Only authenticated {{ENTITY_LOWERCASE}}s can modify the data
   * @apiError (Forbidden 403)    Forbidden    Only {{ENTITY_LOWERCASE}} with same id or admins can modify the data
   * @apiError (Not Found 404)    NotFound     {{ENTITY_CAPITALIZE}} does not exist
   */
  .patch(authorize([ADMIN, LOGGED_USER]), validate(Validation.update{{ENTITY_CAPITALIZE}}), SecurityMiddleware.sanitize, {{ENTITY_LOWERCASE}}Controller.update)
{{ENTITY_CRUD_UPDATE_PATCH_END}}

{{ENTITY_CRUD_DELETE_START}}
  /**
   * @api {patch} v1/{{ENTITY_LOWERCASE}}s/:id Delete {{ENTITY_CAPITALIZE}}
   * @apiDescription Delete a {{ENTITY_LOWERCASE}}
   * @apiVersion 1.0.0
   * @apiName Delete{{ENTITY_CAPITALIZE}}
   * @apiGroup {{ENTITY_CAPITALIZE}}
   * @apiPermission {{ENTITY_LOWERCASE}}
   *
   * @apiHeader {String} Athorization  {{ENTITY_CAPITALIZE}}'s access token
   *
   * @apiSuccess (No Content 204)  Successfully deleted
   *
   * @apiError (Unauthorized 401) Unauthorized  Only authenticated {{ENTITY_LOWERCASE}}s can delete the data
   * @apiError (Forbidden 403)    Forbidden     Only {{ENTITY_LOWERCASE}} with same id or admins can delete the data
   * @apiError (Not Found 404)    NotFound      {{ENTITY_CAPITALIZE}} does not exist
   */
  .delete(authorize([ADMIN, LOGGED_USER]), SecurityMiddleware.sanitize, {{ENTITY_LOWERCASE}}Controller.remove);
{{ENTITY_CRUD_DELETE_END}}

export { router };
